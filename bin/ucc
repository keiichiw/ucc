#!/usr/bin/env python2.7

import os.path
import sys
import subprocess
import argparse

BIN_DIR = os.path.dirname(__file__)

CC = BIN_DIR + '/cc'
AS = BIN_DIR + '/as'

MACROS  = ['__UCC__', 'inline=']
INCDIRS = [BIN_DIR + '/../include']
CPPOPTS = ['-undef', '-nostdinc']
CHKOPTS = ['-fsyntax-only', '-w', '-ansi', '-pedantic-errors', '-Werror=implicit',
           '-Werror=aggregate-return', '-Wno-overlength-strings', '-fno-builtin']
LIBS    = ['ucc', 'c']
ASOPTS  = ['-f__UCC_HEAP_START']

ASMS = []

# parse command line arguments
argparser = argparse.ArgumentParser(
    usage='%(prog)s [options] file...',
    formatter_class=argparse.RawTextHelpFormatter)
argparser.add_argument('inputs',
    nargs='*', help='input files', metavar='file...')
argparser.add_argument('-D',
    help='predefine <macro> when preprocessing', metavar='<macro>',
    action='append', default=MACROS)
argparser.add_argument('-I',
    help='add <directory> to include search path', metavar='<directory>',
    action='append', default=INCDIRS)
argparser.add_argument('-l',
    help='search <library> when linking', metavar='<library>',
    action='append', default=LIBS)
argparser.add_argument('-o',
    help='set output file name', metavar='<file>')
argparser.add_argument('-S', '-s',
    help='compile only; do not assemble or link', action='store_true')
argparser.add_argument('-Wa',
    help='  pass comma-separated <args> to the assembler', metavar='\b=<args>')
argparser.add_argument('-Wc',
    help='  pass comma-separated <args> to the clang', metavar='\b=<args>')
argparser.add_argument('-Wp',
    help='  pass comma-separated <args> to the preprocessor', metavar='\b=<args>')

args = argparser.parse_args()

if args.inputs == []:
    argparser.print_help(sys.stderr)
    exit(1)

if len(args.inputs) > 1 and args.S and args.o:
    print >> sys.stderr, 'ucc: error: cannot specify -o when generating multiple output files'
    exit(1)

def comma_sep_list(arg):
    if not arg:
        return []
    return filter(None, map(str.strip, arg.split(',')))

args.D = map(lambda s: '-D' + s, args.D)
args.I = map(lambda s: '-I' + s, args.I)
args.l = map(lambda s: '-l{}/../lib/lib{}.s'.format(BIN_DIR, s), args.l)
args.Wa = comma_sep_list(args.Wa)
args.Wc = comma_sep_list(args.Wc)
args.Wp = comma_sep_list(args.Wp)

def call(*cmd):
    if subprocess.call(cmd):
        subprocess.call(['rm', '-f'] + ASMS)
        exit(1)

def move_asm(fname):
    if args.S:
        if args.o:
            call('mv', '-f', fname + '.tmp.s', args.o)
        else:
            call('mv', '-f', fname + '.tmp.s', os.path.basename(fname) + '.s')
    else:
        ASMS.append(fname + '.tmp.s')

for filename in args.inputs:
    if not os.path.isfile(filename):
        print >> sys.stderr, 'ucc: error: file does not exist:', filename
        exit(1)
    fname, ext = os.path.splitext(filename)
    if ext == '.c':
        call('clang', '-E', filename, '-o', fname + '.tmp.i', *(CPPOPTS + args.D + args.I + args.Wp))
        call('clang', fname + '.tmp.i', *(CHKOPTS + args.Wc))
        call(CC, fname + '.tmp.i')
        call('rm', '-f', fname + '.tmp.i')
        move_asm(fname)
    elif ext == '.S':
        call('clang', '-E', filename, '-o', fname + '.tmp.s', *(CPPOPTS + args.D + args.I + args.Wp))
        move_asm(fname)
    elif exp == '.s':
        ASMS.append(filename)
    else:
        print >> sys.stderr, 'ucc: error: unknown extension:', ext
        call('rm', '-f', *ASMS)
        exit(1)

if args.S:
    exit(0)

if not args.o:
    args.o = 'a.out'

call(AS, '-o', args.o, *(ASOPTS + args.Wa + args.l + ASMS))
call('rm', '-f', *ASMS)

